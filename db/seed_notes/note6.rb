module Seeds
  class Note6
    def self.content
      <<~NOTECONTENT
        [Music] hello everyone my name is Joe maalot and this is just enough turbo native to be dangerous let's get started I'm here to tell you that turbo native gives rails developers superpowers it transforms our rails code bases into IOS and Android apps by rendering our serers side HTML inside of native mobile apps ones you can download from the app store and have full access to Native sdks like push notifications or Geo fencing but I get it I was a hybrid skeptic too once I was working for company that had about 100ish rails screens and I was tasked to Port that app to both IOS and Android I was able to do so I launched IOS and Android apps to both app stores as the only developer this would have taken years if I built out full both platforms fully native and and submitted to both app stores it took months it took months as I only had picked up turbo native turbo links native at the time imagine what you can do if you already know the framework before this I was an iOS Developer I built real apps with Native sdks thank you very much but my world changed that day and since then I have been all in on turbo native I write tutorials I have YouTube videos on the subject I'm writing a book I'm one of the two maintainers of the turbo iOS library and I've launched dozens of apps to the App Store and Google Play stores I live and breathe turbo native but you're probably saying that hybrid will never be as good as native and you know what you're right it won't nothing will beat the absolute fluidness of gliding your finger across the screen with a GPU accelerated animation that would make credit fitter proud but today I'm here to tell you that your web UI is good enough most screens today render data native controls won't help much turbo native gives you a shortcut it lets you launch into the appap store today with the resources you have instead of waiting years or months to deploy something and test your hypothesis then you can validate those resources now and turbo native gets you there today and for those times when turbo native isn't good enough when you want to go higher Fidelity we have answers for that we're going to talk about those a little bit later today but why turbo native over the Myriad of other hybrid Frameworks well for rails developers it offers true right want deploy anywhere you push your code with new changes to a mobile web view to your mobile web screens IOS app Android app gets those for free no app store approval no resubmitting no rebuilding no rebundling if it's on the server it's in your app this allows you to maximize what you do best writing rails we're not native developers we don't want to be native developers we want to write rails code let's write rails code turbo native turbo native enables this it allows you to skip expensive development cycles of building building out an API and then building it out on iOS and then on Android by writing it once and deploying everywhere and when you really need to you can upgrade specific screens to Native when you really need access to Native sdks like the accelerometer or GPS or push notifications or any of the other things that come out for IOS and Android but it lets you do it on a caseby Case basis when you're ready it's not all or nothing you go web now with everything feature complete and you upgrade individual screens like these are just some of the apps that are in the app store right now built with turbo native some of those might look familiar I've worked on about half of these um but today we're going to do four things we're going to build an app from scratch we're going to learn how to make it feel a little bit more native fitt in on the platform we're going to learn how to integrate Swift UI screens to make that jump to Fidelity and finally we're going to preview some stuff that just came out and that's upcoming for Turbo native that I am very excited to share now today's talk is going to focus on iOS for the most part I only have 30 minutes but everything that I talk about is applicable to both IOS and Android platforms so today we're going to build the demo app this is going to be an IOS app that keeps track of your hiking as you kind of a hiking journal app we have an index page a show page there's some strata elements in the upright that we're talk about later we're going to build this out from scratch we're going to go to the demo now so this is the rail server that's running locally um it's a reals app I can click through get a show page I can edit it's a cred app it's something too exciting we're going to build this into a turbo native IOS app we're going to open up xcode and create a brand new project it's going to be an IOS app and we're going to call it demo we're going to throw it on our desktop this opens to the project Explorer we're not going to worry about this we're going to focus entirely on this scene delegate and I'm going to hiide that off to the left with command zero this function right here happens when the app is launched this is called scene will connect to we're going to delete everything else in this file and only focus on this for for now the first thing we're going to do is create a navigation controller a navigation controller is the basic element of building blocks on turbo native and on UI kit or what you build apps with with on iOS you're probably familiar with it in the contacts app for example this is a navigation controller it's a stack of screens I can navigate forward I can navigate back I can go deeper into multiple layers it's the perfect example it's the perfect framework to build on when we're replicating web because it has a stack what we're going to do with that is set it to our Windows root view controller what this means is that when the app launches we're going to laun right into this navigation controller command R to run and we're going to see an empty white screen but that means it's working up next is we're going to add turbo native file ad package dependencies is going to hook us into the world of Swift package manager these are gems essentially for for iOS I'm going to add turbo iOS which is uh github.com hotwired turbo iOS add package and then add it to our demo Target if I pull open the Explorer on the left I apologize this is a little small but here is the code as if we were to do a bundle open we can start logging into all of Turbo iOS right there it's part of our package I'm going to hide that again now that we have it we're going to import it we now have access to all of the great things of Turbo native and one of the most important ones is something called a session a session is what manages the hard stuff it manages the HTML rendering it manages the screenshotting the snapshotting and we're going to work with that to render out our mobile HTML we're going to create one and then return it here we're using a lazy variable to only create it when we access it for the first time this again remember is when the app launches when the app launches we want to visit our Local Host our local server so up at the top here we're going to create a global variable aable called root URL we're going to point that to our Local Host notice how it's outside of the class definition this means we can access it across our app down here we're going to create a private function called visit this function is going to be called every time you want to make a visit to a new page in our app the parameter that it takes is going to be called a proposal a visit proposal is how turbo native wraps every single visit to your screens command click into this to get the definition of it and we can see that it has three properties below is an initializer URL options and properties a URL is self-explanatory it is the URL of the page you're visiting options are more advanced stuffed for doing these different type of navigation out of scope for today and properties is a hash we're going to talk about that a lot later when we start routing URLs when we want to visit a page we have to do three things we want to create the screen we want to push the screen or display it onto our navigation stack and finally we want to visit the page or render the HTML so let's do that three things three lines of code first things first visitable a visitable view controller is the core of Turbo native rendering this expects a URL which we can pull from The Proposal this manages our web view session that gets passed across the screen as we navigate deeper into our turbo native app it manages snapshotting and caching for us on top of our navigation controller we can now push this visitable we pass in true to animate that on every n plus1 screen to make sure we get that nice animation to make it feel native and finally we take our session and we visit the visitable we're going to pass in excuse me pass in the options from the visit proposal which will make sure that future visits use all of the good stuff that that proposal already had in it finally up here back in where our app launches we're going to create a proposal passing in the URL of our root URL which remember is just right up here and passing in an empty visit options our initial visit it won't be special it just needs the kind of bare bones there we'll pass that off to visit and command R we will run the app if all goes well we should see a spinner for a quick second and load our Local Host index page we now have a turbo native app that displays our content just like that in 33 lines of code we have a problem is broken we can't click links what's going on here is that the session is trying to tell our app to do something but we haven't told it where to send those messages we're going to set up a delegate and call it on self this essentially says when a new visit is clicked route it to me as the scene delegate the scene delegate doesn't conform though we need to tell xcode we're strongly typed remember we're in we're in Swift not Ruby we have to tell xcode that we listen to those methods that we conform to that protocol EXO's going to complain again and be like yeah I get it but uh you don't implement the three methods that you're required to implement so let's Implement those now did propose visit essentially happens when a link is clicked we get that nice visit proposal like we were using before did fail to visit is what happens when an error occurs and finally the web viiew process to terminate is a weird Edge case when the web view dies outside of the context of our IOS app because it runs in a separate process we're going to start with that one because it's easy we can just reload the session this will make sure that we session. reload uh have a brand new context to work with and our page reloads did fail we're just going to print it out for now with the localized description of the error but this is the important one when a link is clicked we want to visit a page again and luckily we have that function already right there we can pass in visit pass in the proposal and we run this we now are listening to that call back through the delegate and we can click on a link and navigate across our app so we now have about 50 lines of code here for what would be the absolute bare minimum turbo native app that you could build off of a rails app that's running all the standards going go back to the slides here and talk about ways that we can make this feel a little bit more native this is what we're working with right zoom in on the top I get it hiking Journal cool um what's going on we have three top middle is the title of the page top left is the back button the title of that page is already hiking Journal so we get it again and then we have a nav bar that's rendered on the web let's deal with that one first we already have a native nav bar no need to have the web one as well to do that we're going to render turbo native specific content but first excuse me but first we have to identify the app as a turbo native app and to do that we're going to set a user agent here's a session that we had before where we set the delegate we're going to create a web view configuration and pass in an application name for user agent calling it turbon native iOS pass that into the session we've now configured that with every request we'll get that turbo native iOS appended to the user agent and then on Rails if you're using turbo rails you get this helper for free it's buried deep in app controllers Native Native navigation I'd recommend checking out that class there's some other hidden stuff in there that's fun um it just checks that turbo native is in the string and returns true here so to hide the Navar here we have our Navar partial let's just unless it done hidden right no problem but I don't know that kind of sits wrong with me that's going to be hard to maintain moving forward yeah once is fine but having that conditional for every time you want to render turbo native content is going to get Harry and it's going to break our Russian do caching we now are sending different HTML over the wire to different user agents we now need to include our user agent somehow in our cach key that might double our cash size no thank you instead we're going to render turbo native specific Styles ones that only apply to the turbo native app to do that we're going to get checkout dot here go back to what we had before and add a new class called turbon native hidden turbon native hidden is quite simply display hidden uh and important because I don't know how to use CSS but the important thing here is that this is a new stylesheet native. CSS this isn't our application CSS it's a new one and we're going to include that in our application layout if you're rendering a turbo native app now this is the only conditional we need in our view layer we're adding we're sending down the wire additional H sorry additional CSS the same HTML but additional CSS that override and customizes our BAS Styles we can do fun things like change what it looks like on iOS or or Android we went from three hiking journals to two hiking journals one down one to go but the important thing is that we rendered turbo native specific content with only our rails code we deploy that change once where we set the user agent and now we can change Styles at will without doing App Store updates let's get rid of this one this title is automatically set from the title HTML tag uh buried somewhere in Turbo native in that turbo uh sorry the visitable view controller we talked about a little bit so here's what our uh application layout looks like right now we set the title to hiking Journal uh we're going to use one of my favorite rails thingies content for um it pulls the value from title and if not defaults back to the static string in our Show view for hikes here's where we render out that each one set content for we've Now set the title dynamically on every single page for each individual hike uh this works great for your HTML as well now you have actual useful title you know in in the nav bar when you have multiple tabs on web and we can go one step further by hiding the H1 on turbo native apps we're already rendering it up in the top we don't need to render it again and just like that we now have one hiking journal on the top left we' gotten rid of the H1 down over here but I get it these are very boot strappy I know they look ugly we'll get rid of those later we've rendered native titles now we've only Ruby code we've already deployed that uh you know that change that sets the uate that sets the user agent we can now do these native titles and change native elements with only our Ruby code now a traditionally difficult part of native development is image uploading there's a lot of code involved with it right so we're going to build it all from Scrat right now here's how to do it or here's it's what it's going to look like we have the edit page choose file we get to pick our photo library take a selfie uh pick from files. apppp we click one of those we get to browse our all of our photos we get to look at our favorites all of our albums you know all this stuff pick a photo zoom in on turbo native here's how we do it step one we're going to add a file field this is backed by active storage in my app could be back by whatever you want on yours file field is the important thing and then step two is that's it that's it we don't have to do anything else turbon native handles this for us we're taking advantage of the fact that we're a web view a web view already has a ton of this functionality built out image uploading is just one of them we get date Pickers time Pickers decimal inputs this is this is IOS this is Android no new code changes just the right HTML markup and the right input Fields we're taking Tak advantage of the fact that Apple and Google have spent years perfecting these uis don't let that go to waste don't re don't reinvent the wheel and don't rebuild one of these unless you absolutely need to your logic stays on the server and you keep writing Ruby you do what you do best you don't need to bring this to Native iOS or native Android if you don't have to let's take a step further and talk about Advanced turbo native screens sorry Advanced turbo native with native screens a lot of native in there um this is a local sandwich place in Portland I recommend checking it out if you're ever in town Portland Oregon in the US um as I was scrolling through this page there's a Google map embedded here and of course I was scrolling and you know what of course what happens right your finger gets stuck and then you start scrolling the map and then you click it by accident and Google's like use our app please and then you quit because you're frustrated um this is a perfect example to upgrade to Native on turbo native here we're rendering out a screenshot on our app of a map we can upgrade it to Swift UI and get a fully scrollable zoomable directions add pins everything we want um in Turbo native so how do we do it first we have to tell the app where when to Route this screen this is the URL we're going to Route anything that says hikes idmap we're going to want to render this native map but we need to remain flexible we don't want to hardcode this into our IOS app if we ever wanted to render that map for just maybe like SL Maps ID we'd have to redeploy to the App Store the path configuration can help us keep this configuration on our server this is a server hosted Json file it looks like this two keys settings and rules we're going to talk about rules today Rules match when you click a URL you get this pattern that applies properties here's the rule we we're build here is the rule that we will be building this is kind of like a routes RB for your IOS app in a way every time we match this pattern slikes a number slmap we're going to apply these properties these properties get applied to the visit proposal down in the properties this is a a hash uh for those in the back that can't see on the bottom I'm showing visit propos Proposal with properties rendered out with string any hashable which means that it's a hash with string keys we're going to Route this file in our our rails routing file to say configurations iOS V1 route to controller I like to version these to make sure we don't lose backwards compatibility if we ever add a new native feature we want to make sure we don't break that in our old apps and here's that copied over to a controller on iOS we have our root URL in our session our session takes in a path configuration we can give it an array of sources and point to our server URL appending our path to our root URL to say here is where our path configuration lives remember that was coming from over here on app launch as soon as the session is initialized lazily it turbo native will fetch parse and apply all these properties for us it will also cach the path configuration for future launches so you're free to update this and not have to worry about maintaining aing anything or doing any networking requests in the app itself it's all handled by Turbo native now we need to actually show the screen this is what we had before in our one two3 method for visit let's just throw all that in an L statement that's our standard web view process our if statement is going to look like this if the properties on proposal has a string and controller named map this would be abstracted um remember this came from our path configuration earlier where we applied those properties we're going to render our map view controller this is just one example of how configurable this is you can imagine this if statement being very big and getting really unwieldy but each one of those could be a different Native feature in your app routed from your server and you can change what URLs get applied from your server the path configuration allows us to keep our Logic on our server and disconnects us from App Store and Google Play releases it also ensures backwards compatibility by versioning this to make sure that old apps don't get broken features looking ahead what's next for Turbo native I bet everyone's going to know what's on the next slide strata very excited about this Jay did an amazing time talking about this yesterday uh I'm not going to dive too deep into it but at the high level you can build native components with strata not full screens but native components it Bridges the gap between web and Native it makes it ensure that you keep your HTML powering your native components not some fancy JavaScript thing and not some Json endpoint but you write your HTML you do mark up on it and you get native components from it what matters to me for this presentation is getting rid of these ugly things with strata we can throw a button in the top right an overflow button and when you click that we get the map and edit buttons with our little icons too from SF symbols sh enables this in not that much code that would require a lot of code before Strada um and the best part is that when I click edit it clicks edit under the hood so whatever is happening behind that button press whether it's a new get a new visit a new post request it just works I'm also super excited about turbo Navigator this is a package that I've been working on for a while now that simplifies getting started with turbo iOS turbo iOS right now as you saw is really quick to get started but anything after that requires a lot of boilerplate there are countless flows that you have to handle um we'll get into those in a sec but what turbo Navigator does is it handles 15 of those for you so we have modal navigation presenting something from the bottom of the screen and dismissing it we have have um diving deep into the stack so I'm now going one screen two screens into the stack and then clearing all like when you would log someone in or sign someone out and then we also have basic navigation of pushing and popping controllers off of the stack there's a lot of other things that were in there I recommend checking out the GitHub which I'll link to in a sec it handles 15 different flows and I found it removes about 100 lines of boiler plate I use this on every one of my client apps and the good news is that it'll being up streamed Into Turbo iOS very soon we've done about 90% of the work so we have about 90% left but it's soon I promise if you want to get a look at it early check it out on GitHub give it a watch give it a star um we'll be announcing the you know the Upstream merge there when that happens so we talked a lot about how to build turbon native apps but let's talk about your turbon native apps I help folks launch turbon native apps I do coding I do Consulting I do workshops I do training I do advisory and I'd love to help you get yours in the app store or the Google Play Store if you are interested in Turbo native or just want to talk about it and see if it's right for your company come say hi I'd love to chat again I'm Joe masotti if you have any questions on this or Turbo native this is my email and if you want to learn more about turbo native I have a Weekly Newsletter and blog about this all the time masti.com thank [Applause] [Music] you
      NOTECONTENT
    end
  end
end
